{
  "_args": [
    [
      {
        "raw": "when-dom-ready",
        "scope": null,
        "escapedName": "when-dom-ready",
        "name": "when-dom-ready",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/usr/share/nginx/html/Howdy-Server"
    ]
  ],
  "_from": "when-dom-ready@latest",
  "_id": "when-dom-ready@1.2.11",
  "_inCache": true,
  "_location": "/when-dom-ready",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/when-dom-ready-1.2.11.tgz_1489894867535_0.3639787605497986"
  },
  "_npmUser": {
    "name": "lukechilds",
    "email": "lukechilds123@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "when-dom-ready",
    "scope": null,
    "escapedName": "when-dom-ready",
    "name": "when-dom-ready",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/when-dom-ready/-/when-dom-ready-1.2.11.tgz",
  "_shasum": "d462892d225cd44ef6c02facc737a65155207d06",
  "_shrinkwrap": null,
  "_spec": "when-dom-ready",
  "_where": "/usr/share/nginx/html/Howdy-Server",
  "author": {
    "name": "Luke Childs",
    "email": "lukechilds123@gmail.com",
    "url": "http://lukechilds.co.uk"
  },
  "ava": {
    "require": [
      "./test/helpers/setup-browser-env.js"
    ]
  },
  "babel": {
    "plugins": [
      "transform-es2015-arrow-functions",
      "array-includes"
    ]
  },
  "bugs": {
    "url": "https://github.com/lukechilds/when-dom-ready/issues"
  },
  "dependencies": {},
  "description": "$(document).ready() for the 21st century",
  "devDependencies": {
    "ava": "^0.17.0",
    "babel-plugin-array-includes": "^2.0.3",
    "babel-plugin-transform-es2015-arrow-functions": "^6.22.0",
    "browser-env": "^2.0.23",
    "camelcase": "^4.0.0",
    "coveralls": "^2.11.15",
    "eslint-config-xo-lukechilds": "^1.0.0",
    "jsdom": "^9.9.1",
    "nyc": "^10.0.0",
    "rollup": "^0.41.4",
    "rollup-plugin-babel": "^2.7.1",
    "window": "^3.1.1",
    "xo": "^0.17.1"
  },
  "directories": {},
  "dist": {
    "shasum": "d462892d225cd44ef6c02facc737a65155207d06",
    "tarball": "https://registry.npmjs.org/when-dom-ready/-/when-dom-ready-1.2.11.tgz"
  },
  "gitHead": "c14fa175939c701a3495b2a21bcad7d99bb14ac5",
  "homepage": "https://github.com/lukechilds/when-dom-ready",
  "keywords": [
    "check",
    "dom",
    "loaded",
    "ready",
    "promise",
    "async",
    "asynchronous",
    "pure"
  ],
  "license": "MIT",
  "main": "dist/index.umd.js",
  "maintainers": [
    {
      "name": "lukechilds",
      "email": "lukechilds123@gmail.com"
    }
  ],
  "module": "dist/index.es2015.js",
  "name": "when-dom-ready",
  "optionalDependencies": {},
  "readme": "# when-dom-ready\n\n> $(document).ready() for the 21st century\n\n[![Build Status](https://travis-ci.org/lukechilds/when-dom-ready.svg?branch=master)](https://travis-ci.org/lukechilds/when-dom-ready)\n[![Coverage Status](https://coveralls.io/repos/github/lukechilds/when-dom-ready/badge.svg?branch=master)](https://coveralls.io/github/lukechilds/when-dom-ready?branch=master)\n[![npm](https://img.shields.io/npm/v/when-dom-ready.svg)](https://www.npmjs.com/package/when-dom-ready)\n\nReturns a Promise for cleaner usage, provides a Promise chain helper function and can also be used as a pure function. The Promise will resolve instantly if the DOM is already ready.\n\n## Browser Compatibility\n\n- IE9+ (requires Promise polyfill)\n- Edge *\n- Firefox 29+\n- Safari 8+\n- Chrome 33+\n- Opera 23+\n\n## Install\n\n```shell\nnpm install --save when-dom-ready\n```\n\nor for quick testing:\n\n```html\n<script src=\"https://unpkg.com/when-dom-ready\"></script>\n```\n\n## Usage\n\n```js\nimport whenDomReady from 'when-dom-ready';\n\nwhenDomReady().then(() => console.log('DOM is ready yo!'));\n```\n\nYou can still use callbacks if you want to:\n\n```js\nwhenDomReady(() => console.log('DOM is ready yo!'));\n```\n\n## Promise chain helper\n\nThere is also a little helper function, `whenDomReady.resume()`, that pauses the execution of a Promise chain and then resumes it with the last value once the DOM is ready.\n\nThis allows you to specify complex async control flow in simple readable code:\n\n```js\nfetch('/my-badass-api.json')\n  .then(getSomeProcessingDoneWhileWaitingForDom)\n  .then(whenDomReady.resume())\n  .then(injectDataIntoDom);\n```\n\n## Pure usage\n\nYou can make the function pure by passing in a `document` object. This is really [useful for tests](https://github.com/lukechilds/when-dom-ready/blob/master/test/unit.js) and mocking environments.\n\nFor example this works in Node.js:\n\n```js\nconst Window = require('window');\nconst whenDomReady = require('when-dom-ready');\n\nconst { document } = new Window();\n\nwhenDomReady(document).then(() => console.log('DOM is ready yo!'));\n```\n\nAgain, you can use the callback version as a pure function too:\n\n```js\nwhenDomReady(() => console.log('DOM is ready yo!'), document);\n```\n\nAnd of course the helper:\n\n```js\n//...\n  .then(whenDomReady.resume(document))\n```\n\n## License\n\nMIT Â© Luke Childs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lukechilds/when-dom-ready.git"
  },
  "scripts": {
    "build": "rollup -c",
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "lint": "xo",
    "prebuild": "rm -rf dist",
    "prepublish": "npm run build",
    "pretest": "npm run build",
    "test": "nyc ava"
  },
  "version": "1.2.11",
  "xo": {
    "env": "browser",
    "extends": "xo-lukechilds"
  }
}
